<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Marisa&#39;s blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://marisa.im/"/>
  <updated>2019-04-22T07:07:58.879Z</updated>
  <id>http://marisa.im/</id>
  
  <author>
    <name>marisa</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>centos7 部署Kubernetes集群</title>
    <link href="http://marisa.im/2019/04/16/centos7-deploy-kubernetes-cluster/"/>
    <id>http://marisa.im/2019/04/16/centos7-deploy-kubernetes-cluster/</id>
    <published>2019-04-16T03:09:15.000Z</published>
    <updated>2019-04-22T07:07:58.879Z</updated>
    
    <content type="html"><![CDATA[<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ol><li>禁用selinux<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">setenforce 0 <span class="comment"># 临时禁用selinux</span></span><br><span class="line">vi /etc/selinux/config</span><br><span class="line"></span><br><span class="line"><span class="comment"># This file controls the state of SELinux on the system.</span></span><br><span class="line"><span class="comment"># SELINUX= can take one of these three values:</span></span><br><span class="line"><span class="comment">#     enforcing - SELinux security policy is enforced.</span></span><br><span class="line"><span class="comment">#     permissive - SELinux prints warnings instead of enforcing.</span></span><br><span class="line"><span class="comment">#     disabled - No SELinux policy is loaded.</span></span><br><span class="line">SELINUX=disabled  <span class="comment"># 改为disabled</span></span><br><span class="line"><span class="comment"># SELINUXTYPE= can take one of three two values:</span></span><br><span class="line"><span class="comment">#     targeted - Targeted processes are protected,</span></span><br><span class="line"><span class="comment">#     minimum - Modification of targeted policy. Only selected processes are protected.</span></span><br><span class="line"><span class="comment">#     mls - Multi Level Security protection.</span></span><br><span class="line">SELINUXTYPE=targeted</span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li>将主机名写入hosts文件中<code>vi /etc/hosts</code><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@VM_0_11_centos ~]<span class="comment"># vi /etc/hosts</span></span><br><span class="line">127.0.0.1 VM_0_11_centos VM_0_11_centos <span class="comment"># 加入这行</span></span><br><span class="line">::1 VM_0_11_centos VM_0_11_centos <span class="comment"># 加入这行</span></span><br></pre></td></tr></table></figure></li></ol><ol start="3"><li><p>禁用swap分区</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">swapoff -a <span class="comment"># 临时禁用swap分区</span></span><br><span class="line">vi /etc/fstab 注释掉swap的项 <span class="comment"># 永久禁用swap分区</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭swap之后可以 free -m 检验 如果Swap这行都是 0 则说明swap被关闭</span></span><br><span class="line">[root@VM_0_11_centos ~]<span class="comment"># free -m</span></span><br><span class="line">              total        used        free      shared  buff/cache   available</span><br><span class="line">Mem:            991         182          69           0         739         625</span><br><span class="line">Swap:             0           0           0</span><br></pre></td></tr></table></figure></li><li><p>重启服务器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reboot</span><br></pre></td></tr></table></figure></li></ol><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><h3 id="1-加入yum-repo"><a href="#1-加入yum-repo" class="headerlink" title="1. 加入yum repo"></a>1. 加入yum repo</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">cat &lt;&lt;EOF &gt; /etc/yum.repos.d/centos.repo</span><br><span class="line">[centos]</span><br><span class="line">name=CentOS-7</span><br><span class="line">baseurl=http://ftp.heanet.ie/pub/centos/7/os/x86_64/</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=http://ftp.heanet.ie/pub/centos/7/os/x86_64/RPM-GPG-KEY-CentOS-7</span><br><span class="line"><span class="comment">#additional packages that may be useful</span></span><br><span class="line">[extras]</span><br><span class="line">name=CentOS-<span class="variable">$releasever</span> - Extras</span><br><span class="line">baseurl=http://ftp.heanet.ie/pub/centos/7/extras/x86_64/</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=0</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><h3 id="2-安装docker"><a href="#2-安装docker" class="headerlink" title="2.安装docker"></a>2.安装docker</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">yum -y update </span><br><span class="line">yum -y install docker</span><br><span class="line">systemctl <span class="built_in">enable</span> docker</span><br><span class="line">systemctl start docker</span><br></pre></td></tr></table></figure><h3 id="3-安装kubelet、kubeadm"><a href="#3-安装kubelet、kubeadm" class="headerlink" title="3. 安装kubelet、kubeadm"></a>3. 安装kubelet、kubeadm</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">cat &lt;&lt;EOF &gt; /etc/yum.repos.d/kubernetes.repo</span><br><span class="line">[kubernetes]</span><br><span class="line">name=Kubernetes</span><br><span class="line">baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=1</span><br><span class="line">repo_gpgcheck=1</span><br><span class="line">gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装kubelet kubeadm kubectl</span></span><br><span class="line">yum -y install kubelet kubeadm kubectl</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动kubelet</span></span><br><span class="line">systemctl start kubelet</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置kubelet开机自启动</span></span><br><span class="line">systemctl <span class="built_in">enable</span> kubelet</span><br></pre></td></tr></table></figure><h3 id="4-额外的配置"><a href="#4-额外的配置" class="headerlink" title="4. 额外的配置"></a>4. 额外的配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cat &lt;&lt;EOF &gt;  /etc/sysctl.d/k8s.conf</span><br><span class="line">net.bridge.bridge-nf-call-ip6tables = 1</span><br><span class="line">net.bridge.bridge-nf-call-iptables = 1</span><br><span class="line">EOF</span><br><span class="line">sysctl --system</span><br><span class="line"><span class="built_in">echo</span> 1 &gt; /proc/sys/net/ipv4/ip_forward</span><br></pre></td></tr></table></figure><h3 id="5-初始化集群"><a href="#5-初始化集群" class="headerlink" title="5. 初始化集群"></a>5. 初始化集群</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubeadm init --pod-network-cidr=10.244.0.0/16</span><br></pre></td></tr></table></figure><h3 id="6-做好备份"><a href="#6-做好备份" class="headerlink" title="6. 做好备份"></a>6. 做好备份</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p <span class="variable">$HOME</span>/.kube</span><br><span class="line">sudo cp -i /etc/kubernetes/admin.conf <span class="variable">$HOME</span>/.kube/config</span><br><span class="line">sudo chown $(id -u):$(id -g) <span class="variable">$HOME</span>/.kube/config</span><br></pre></td></tr></table></figure><h3 id="7-额外的操作"><a href="#7-额外的操作" class="headerlink" title="7.额外的操作"></a>7.额外的操作</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sysctl net.bridge.bridge-nf-call-iptables=1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装flannel网络插件</span></span><br><span class="line">kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/a70459be0084506e4ec919aa1c114638878db11b/Documentation/kube-flannel.yml</span><br></pre></td></tr></table></figure><h3 id="8-检验是否部署成功"><a href="#8-检验是否部署成功" class="headerlink" title="8.检验是否部署成功"></a>8.检验是否部署成功</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">kubectl get nodes</span><br><span class="line"></span><br><span class="line">[root@VM_0_11_centos ~]<span class="comment"># kubectl get nodes</span></span><br><span class="line">NAME             STATUS   ROLES    AGE   VERSION</span><br><span class="line">VM_0_11_centos   Ready    master   14d   v1.14.0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认master节点是不能调度pod 使用以下命令解除限制</span></span><br><span class="line">kubectl taint nodes --all node-role.kubernetes.io/master-</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;准备工作&quot;&gt;&lt;a href=&quot;#准备工作&quot; class=&quot;headerlink&quot; title=&quot;准备工作&quot;&gt;&lt;/a&gt;准备工作&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;禁用selinux&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td c
      
    
    </summary>
    
    
      <category term="centos7" scheme="http://marisa.im/tags/centos7/"/>
    
      <category term="kubernetes" scheme="http://marisa.im/tags/kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>把你的博客放在国外</title>
    <link href="http://marisa.im/2018/07/16/%E6%8A%8A%E4%BD%A0%E7%9A%84%E5%8D%9A%E5%AE%A2%E6%94%BE%E5%9C%A8%E5%9B%BD%E5%A4%96/"/>
    <id>http://marisa.im/2018/07/16/把你的博客放在国外/</id>
    <published>2018-07-16T07:09:33.000Z</published>
    <updated>2018-07-20T03:41:46.168Z</updated>
    
    <content type="html"><![CDATA[<p>博客首选当然是放在国内，毕竟访问博客的人大部分分布在国内。放在国内的话，三次握手时间也短。当然众所周知的原因，博客放国内不仅要备案，还会对博客的内容进行审查。接这个题目来讲讲哪些放在国内速度也很快的方法。</p><p>🇭🇰 香港<br>香港的地理优势十分明显，由于靠近广东，深圳、广州的ping值基本上7ms左右，再加上香港地区不用备案，可以说是网站放置的首选位置。<br>🇲🇴 澳门</p><p>🇰🇷 韩国</p><p>🇷🇺 伯力</p><p>🇯🇵 日本</p><p>🇸🇬 新加坡</p>]]></content>
    
    <summary type="html">
    
      把你的博客放在国外
    
    </summary>
    
    
      <category term="备案" scheme="http://marisa.im/tags/%E5%A4%87%E6%A1%88/"/>
    
      <category term="建站" scheme="http://marisa.im/tags/%E5%BB%BA%E7%AB%99/"/>
    
  </entry>
  
  <entry>
    <title>上网新姿势</title>
    <link href="http://marisa.im/2018/07/16/%E4%B8%8A%E7%BD%91%E6%96%B0%E5%A7%BF%E5%8A%BF/"/>
    <id>http://marisa.im/2018/07/16/上网新姿势/</id>
    <published>2018-07-16T06:40:59.000Z</published>
    <updated>2018-07-20T03:41:44.208Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><p>在公司已经两周没啥事干了，所以 <del>写点文章来消磨时间</del> 给大家讲讲怎么上网。经常没事做的话就很无聊，要是有事让我做就好了(逃。</p><p>关于上网，相信大家都会上网。有人会说上网不就是打开浏览器输入网址那么简单么，有什么好说的。其实上网里面大有文章可做。</p><p>上网其实就是输入一个域名，然后进行DNS解析，获取到IP之后进行三次握手，建立连接后，客户端向服务端请求html和其他资源。</p><p>程序员对上网的理解可能到这里就结束了，但对建立连接走什么线路是不清楚。甚至认为建立连接走什么线路默认都是走直连的。</p><p>连接外国的互联网肯定是通过光纤连接的，让我们先看下世界的海缆图。可以看到天朝的海缆出口只有三个，分别为：青岛、上海、广州。是不是我们上国外的网也走的这三个出口。</p><p><strong>总结一下：</strong><br>出国路由：北京、上海、广州<br>物理路由：青岛、上海、广州</p><p>在办宽带的时候，经常会遇到这种问题：我该是办电信宽带好还是预算少办个移动宽带也能用，这就涉及到宽带品质的问题了。</p><p><strong>总结一下：</strong><br>带宽品质的比较：<br>CUII &gt; CN2 &gt; 电信 &gt; 联通 &gt; 移动 &gt; 长城宽带(鹏博士)  南方<br>CUII &gt; CN2 &gt; 联通 &gt; 电信 &gt; 移动 &gt; 长城宽带(鹏博士)  北方</p><h2 id="为什么上国外网的那么慢？"><a href="#为什么上国外网的那么慢？" class="headerlink" title="为什么上国外网的那么慢？"></a>为什么上国外网的那么慢？</h2><p>因为国内的国际出口比较小，在大家的宽带都在100M、200M的情况下，国际出口并没有扩容就会国际带宽不足，所以会显得比较慢。</p><h2 id="为什么玩国外的游戏那么卡，必须要开加速器？"><a href="#为什么玩国外的游戏那么卡，必须要开加速器？" class="headerlink" title="为什么玩国外的游戏那么卡，必须要开加速器？"></a>为什么玩国外的游戏那么卡，必须要开加速器？</h2><p>先说说加速器的原理。加速器让你玩游戏不卡就是游戏的包走高品质的线路，所以不会卡。以吃鸡为例，吃鸡的东南服以前不在香港，现在搬到Microsoft香港。</p>]]></content>
    
    <summary type="html">
    
      上网新姿势
    
    </summary>
    
    
      <category term="上网" scheme="http://marisa.im/tags/%E4%B8%8A%E7%BD%91/"/>
    
      <category term="宽带" scheme="http://marisa.im/tags/%E5%AE%BD%E5%B8%A6/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu开启HTTPS和HTTP2</title>
    <link href="http://marisa.im/2017/03/06/Ubuntu%E5%BC%80%E5%90%AFHTTPS%E5%92%8CHTTP2/"/>
    <id>http://marisa.im/2017/03/06/Ubuntu开启HTTPS和HTTP2/</id>
    <published>2017-03-06T14:47:52.000Z</published>
    <updated>2018-07-05T02:12:52.774Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要记录一下从无到开启HTTPS和HTTP2的过程。</p><a id="more"></a><h3 id="运行环境"><a href="#运行环境" class="headerlink" title="运行环境"></a>运行环境</h3><ul><li>Ubuntu 16.04 LTS</li><li>Nging 1.10.0</li><li>OpenSSL 1.0.2g</li></ul><h3 id="一、安装最新版本-Nginx"><a href="#一、安装最新版本-Nginx" class="headerlink" title="一、安装最新版本 Nginx"></a>一、安装最新版本 Nginx</h3><p><strong>首先更新下 apt-get</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure><p><strong>安装 nginx</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install nginx</span><br></pre></td></tr></table></figure><p>安装结束后，通过如下命令查看 Nginx 版本。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nginx -v</span><br></pre></td></tr></table></figure><p>应该返回如下结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Ouput of sudo nginx -v</span><br><span class="line">nginx version: nginx/1.10.0 (Ubuntu)</span><br></pre></td></tr></table></figure><h3 id="二、更改-Nginx-监听端口并开启-HTTP2"><a href="#二、更改-Nginx-监听端口并开启-HTTP2" class="headerlink" title="二、更改 Nginx 监听端口并开启 HTTP2"></a>二、更改 Nginx 监听端口并开启 HTTP2</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/nginx/sites-available/default</span><br></pre></td></tr></table></figure><p>找到下列几行。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">listen 80 default_server;</span><br><span class="line">listen [::]:80 default_server;</span><br></pre></td></tr></table></figure></p><p>更改为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">listen 443 ssl http2 default_server;</span><br><span class="line">listen [::]:443 ssl http2 default_server;</span><br></pre></td></tr></table></figure></p><h3 id="三、更改服务器名"><a href="#三、更改服务器名" class="headerlink" title="三、更改服务器名"></a>三、更改服务器名</h3><p>还是在default文件中，更改server_name<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">server_name example.com;</span><br></pre></td></tr></table></figure></p><p>到此这一步，可以通过如下命令测试Nginx服务配置是否正确。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nginx -t</span><br></pre></td></tr></table></figure></p><p>如果你上述步骤都没有问题，应该得到如下的返回结果。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nginx: the configuration file /etc/nginx/nginx.conf syntax is ok</span><br><span class="line">nginx: configuration file /etc/nginx/nginx.conf test is successful</span><br></pre></td></tr></table></figure></p><h3 id="四、添加SSL证书"><a href="#四、添加SSL证书" class="headerlink" title="四、添加SSL证书"></a>四、添加SSL证书</h3><p>因为HTTP2建议开启HTTPS，所以我们需要一个免费的HTTPS证书，这里推荐letsencrypt。<br>可通过如下命令安装 letsencrypt。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install letsencrypt</span><br></pre></td></tr></table></figure></p><p>安装完成后，执行如下指令生成SSL证书。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">letsencrypt certonly</span><br></pre></td></tr></table></figure></p><p>生成过程第一步是让你填写邮箱地址。<br>第二步是让你填写域名地址。填写格式为 example.com<br>证书生成完毕后，会得到如下结果。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Output:</span><br><span class="line">IMPORTANT NOTES:</span><br><span class="line"> - If you lose your account credentials, you can recover through</span><br><span class="line">   e-mails sent to sammy@digitalocean.com</span><br><span class="line"> - Congratulations! Your certificate and chain have been saved at</span><br><span class="line">   /etc/letsencrypt/live/example.com/fullchain.pem. Your</span><br><span class="line">   cert will expire on 2016-03-15. To obtain a new version of the</span><br><span class="line">   certificate in the future, simply run Let&apos;s Encrypt again.</span><br><span class="line"> - Your account credentials have been saved in your Let&apos;s Encrypt</span><br><span class="line">   configuration directory at /etc/letsencrypt. You should make a</span><br><span class="line">   secure backup of this folder now. This configuration directory will</span><br><span class="line">   also contain certificates and private keys obtained by Let&apos;s</span><br><span class="line">   Encrypt so making regular backups of this folder is ideal.</span><br><span class="line"> - If like Let&apos;s Encrypt, please consider supporting our work by:</span><br><span class="line"></span><br><span class="line">   Donating to ISRG / Let&apos;s Encrypt:   https://letsencrypt.org/donate</span><br><span class="line">   Donating to EFF:                    https://eff.org/donate-le</span><br></pre></td></tr></table></figure></p><p>证书保存路径为 /etc/letsencrypt/example.com/live/</p><p>再次编辑default<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/nginx/sites-available/default</span><br></pre></td></tr></table></figure></p><p>添加如下SSL配置。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssl_certificate /etc/letsencrypt/live/example.com/fullchain.pem;</span><br><span class="line">ssl_certificate_key /etc/letsencrypt/live/example.com/privkey.pem;</span><br></pre></td></tr></table></figure></p><h3 id="五、为SSL连接提高加密安全系数"><a href="#五、为SSL连接提高加密安全系数" class="headerlink" title="五、为SSL连接提高加密安全系数"></a>五、为SSL连接提高加密安全系数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo openssl dhparam -out /etc/nginx/ssl/dhparam.pem 2048</span><br></pre></td></tr></table></figure><p>然后在 /etc/nginx/sites-available/default 加入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssl_dhparam  /etc/nginx/ssl/dhparam.pem;</span><br></pre></td></tr></table></figure></p><h3 id="六、重定向HTTP流量到HTTPS"><a href="#六、重定向HTTP流量到HTTPS" class="headerlink" title="六、重定向HTTP流量到HTTPS"></a>六、重定向HTTP流量到HTTPS</h3><p>在 default 下重开一个 server<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 443 ssl http2 default_server;</span><br><span class="line">    listen [::]:443 ssl http2 default_server;</span><br><span class="line">    // other settings</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">       listen         80;</span><br><span class="line">       listen    [::]:80;</span><br><span class="line">       server_name    example.com;</span><br><span class="line">       return         301 https://$server_name$request_uri;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="七、重启-Nginx-服务"><a href="#七、重启-Nginx-服务" class="headerlink" title="七、重启 Nginx 服务"></a>七、重启 Nginx 服务</h3><p>至此，Nginx服务都配置完成了。你的配置应该如下所示。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen 443 ssl http2 default_server;</span><br><span class="line">        listen [::]:443 ssl http2 default_server;</span><br><span class="line"></span><br><span class="line">        root /var/www/html;</span><br><span class="line"></span><br><span class="line">        index index.html index.htm index.nginx-debian.html;</span><br><span class="line"></span><br><span class="line">        server_name example.com;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">                try_files $uri $uri/ =404;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ssl_certificate /etc/nginx/ssl/example.com.crt;</span><br><span class="line">        ssl_certificate_key /etc/nginx/ssl/example.com.key;</span><br><span class="line">        ssl_dhparam /etc/nginx/ssl/dhparam.pem;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">       listen         80;</span><br><span class="line">       listen    [::]:80;</span><br><span class="line">       server_name    example.com;</span><br><span class="line">       return         301 https://$server_name$request_uri;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>为了保存至此的修改，重启Nginx服务。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service nginx restart</span><br></pre></td></tr></table></figure></p><h3 id="八、大功告成"><a href="#八、大功告成" class="headerlink" title="八、大功告成"></a>八、大功告成</h3><p>你的服务器已经开启了HTTP2和HTTPS，那么怎么检查网站是否开启HTTP2协议呢。<br>打开Chrome开发工具，右键表头开启协议显示如下图所示。<br><img src="https://assets.digitalocean.com/articles/nginx_http2/http2_check.png" alt="开启协议显示"><br>现在我们看到，所有的请求都是HTTP2请求。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要记录一下从无到开启HTTPS和HTTP2的过程。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>博客所用技术</title>
    <link href="http://marisa.im/2017/01/07/%E5%8D%9A%E5%AE%A2%E6%89%80%E7%94%A8%E6%8A%80%E6%9C%AF/"/>
    <id>http://marisa.im/2017/01/07/博客所用技术/</id>
    <published>2017-01-07T13:58:51.000Z</published>
    <updated>2018-07-05T02:12:52.774Z</updated>
    
    <content type="html"><![CDATA[<p>本来去年自己动手写一个博客，但拖到现在还没完成。</p><a id="more"></a><p>本博客所用技术一览：</p><ul><li>koa2</li><li>hexo</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本来去年自己动手写一个博客，但拖到现在还没完成。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>2016年总结</title>
    <link href="http://marisa.im/2017/01/01/2016%E5%B9%B4%E6%80%BB%E7%BB%93/"/>
    <id>http://marisa.im/2017/01/01/2016年总结/</id>
    <published>2017-01-01T13:30:07.000Z</published>
    <updated>2018-07-05T02:12:52.774Z</updated>
    
    <content type="html"><![CDATA[<p>很快2016年就过去了，回顾这一年学到了不少东西。</p><a id="more"></a><p>从3月28号第一天到公司实习，那时候什么对我都是新鲜的。当时进入的是技术体系，带我的人让我做的项目是一个后台管理系统，主要用到的是<code>Bootstrap</code> 和 <code>jQuery</code>。当时也没用模板，页面直接都是.php文件写的，用的<code>twig</code>粘起来的。比如</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">include</span> <span class="string">"header.php"</span>&gt;</span><br><span class="line">&lt;<span class="keyword">include</span> <span class="string">"footer.php"</span>&gt;</span><br><span class="line"></span><br><span class="line">&#123;&#123; extends <span class="string">"template.php"</span>&#125;&#125;</span><br></pre></td></tr></table></figure><p>当时，我刚好学过<code>Django</code>，里面的模板引擎长的和<code>twig</code>一模一样，所以驾轻就熟很快就适应了。但是这种方式毕竟有点原始，还处在刀耕火种的时代。我向带我的人提出了使用<code>webpack</code>和<code>vue.js</code> 的组件化的开发方式。但似乎是因为我刚来的缘故，她也没放在心上。</p><p>后来就这么干到了6月底，我刚拿了学位证从学校回来，领导把我调到了产品部门，里面用的就是<code>webpack</code>和<code>vue.js</code>的方式，不过好像缺少开发经验，前面的人挖了不少的坑，而且我当时也不熟悉组件化怎么开发，一直到12月份，我才慢慢适应过来。不过由于项目早期的决策失误，到现在好像也没法改了，比如没有使用<code>vue</code>封装的框架、没有使用<code>vuex</code>管理组件状态、组件设计有问题等等。</p><p>16年从刚进公司只会<code>Boostrap</code>和<code>jQuery</code>到现在的会使用<code>vue.js</code>、<code>webpack</code>、<code>stylus</code>等等，我成长了许多。</p><p>17年我还有许多要学习的地方，制定了几个微小的目标。</p><ul><li>haskell</li><li>Go</li><li>继续提高审美</li><li>提高科学上网能力</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;很快2016年就过去了，回顾这一年学到了不少东西。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>给你的网站加上Https</title>
    <link href="http://marisa.im/2016/05/07/%E7%BB%99%E4%BD%A0%E7%9A%84%E7%BD%91%E7%AB%99%E5%8A%A0%E4%B8%8AHttps/"/>
    <id>http://marisa.im/2016/05/07/给你的网站加上Https/</id>
    <published>2016-05-07T08:44:48.000Z</published>
    <updated>2018-07-05T02:12:52.774Z</updated>
    
    <content type="html"><![CDATA[<p>无论是手机还是PC上网的时候，如果网站采用的是普通的Http网站，可能会被运营商劫持，并在相应页面加上广告。</p><a id="more"></a><h3 id="使用Https的好处"><a href="#使用Https的好处" class="headerlink" title="使用Https的好处"></a>使用Https的好处</h3><p>以前用http协议的时候，等于互联网公司给用户寄货，但随便选个包装然后让运营商配送给用户。运营商公司为了自己的利益，把包装拆开，在里面塞满了各种广告。甚至有可能，用户就买本书，结果包装里被运营商塞了整整一箱传单或者小卡片送了过去。甚至可能是下面的这种卡片。</p><p><img src="http://r6.loli.io/BjMR7b.png" alt="enter image description here"></p><p>现在开始使用https协议了，互联网公司给用户寄货，不过这次选了一个保险箱给与用户寄货，开箱密码通过另外的渠道告诉用户，然后让运营商给用户配送过去。虽然这样成本高了很多，但是终于安全了。</p><h3 id="搭建准备"><a href="#搭建准备" class="headerlink" title="搭建准备"></a>搭建准备</h3><ul><li>Nginx</li><li>Git</li></ul><p><strong>安装 nginx</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install nginx</span><br></pre></td></tr></table></figure><p><strong>安装 Git</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install git</span><br></pre></td></tr></table></figure><h3 id="开始搭建"><a href="#开始搭建" class="headerlink" title="开始搭建"></a>开始搭建</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/letsencrypt/letsencrypt</span><br></pre></td></tr></table></figure><p>进入相应文件夹，执行如下命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./letsencrypt-auto certonly</span><br></pre></td></tr></table></figure><p>会有一段时间的下载，完成后出现下图<br><img src="https://scarletmu.b0.upaiyun.com/blog/7524c1924522dcdf47190ebef0db5afc.png" alt="enter image description here"></p><p>这里选择第二项，输入域名<br><img src="https://scarletmu.b0.upaiyun.com/blog/67aa65fd8990649bf5a251494a53e33c.png" alt="enter image description here"></p><p>然后输入要绑定的域名,域名检测完毕之后同意他的协议即可,然后就会结束图形界面,提示成功啦!</p><p>到这里我们的Let’s Encrypt证书就创建完成了</p><p>为了提升安全性,我们需要建立Diffie-Hellman密钥,这里根据CPU性能不同要花不少时间</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl dhparam -out /etc/ssl/certs/dhparam.pem 2048</span><br></pre></td></tr></table></figure><p><strong>完成后进入nginx.conf进行配置</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">server&#123;</span><br><span class="line">    listen 443 ssl;</span><br><span class="line">    </span><br><span class="line">    server_name 域名;</span><br><span class="line">    // 引入证书,提示成功时会给你证书的位置</span><br><span class="line">    ssl_certificate /etc/letsencrypt/live/使用的域名/fullchain.pem;</span><br><span class="line">    ssl_certificate_key /etc/letsencrypt/live/使用的域名/privkey.pem;</span><br><span class="line">        </span><br><span class="line">    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br><span class="line">    ssl_prefer_server_ciphers on;</span><br><span class="line">    ssl_dhparam /etc/ssl/certs/dhparam.pem;</span><br><span class="line">    ssl_ciphers &apos;ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA&apos;;</span><br><span class="line">    ssl_session_timeout 1d;</span><br><span class="line">    ssl_session_cache shared:SSL:50m;</span><br><span class="line">    ssl_stapling on;</span><br><span class="line">    ssl_stapling_verify on;</span><br><span class="line">    add_header Strict-Transport-Security max-age=15768000;</span><br><span class="line">    location / &#123;</span><br><span class="line">        // 反代信息</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">// 80端口重定向至443端口</span><br><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name 域名;</span><br><span class="line">    return 301 https://$host$request_uri;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="重启nginx服务器"><a href="#重启nginx服务器" class="headerlink" title="重启nginx服务器"></a>重启nginx服务器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service nginx restart</span><br></pre></td></tr></table></figure><p>至此https已经搭建好了，你可以去 <a href="https://www.ssllabs.com/ssltest/analyze.html" target="_blank" rel="noopener">ssllab</a> 测试自己网站的https强度。一般通过Let’s encrypt提供的SSL证书都是A+级别。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;无论是手机还是PC上网的时候，如果网站采用的是普通的Http网站，可能会被运营商劫持，并在相应页面加上广告。&lt;/p&gt;
    
    </summary>
    
    
      <category term="nginx" scheme="http://marisa.im/tags/nginx/"/>
    
      <category term="let&#39;s encrypt" scheme="http://marisa.im/tags/let-s-encrypt/"/>
    
      <category term="https" scheme="http://marisa.im/tags/https/"/>
    
  </entry>
  
  <entry>
    <title>Django部署nginx</title>
    <link href="http://marisa.im/2016/04/27/Django%E9%83%A8%E7%BD%B2nginx/"/>
    <id>http://marisa.im/2016/04/27/Django部署nginx/</id>
    <published>2016-04-27T14:52:19.000Z</published>
    <updated>2018-07-05T02:12:52.774Z</updated>
    
    <content type="html"><![CDATA[<p>Django自带的 python manage.py runserver只提供测试用，到了实际生产环境中，需要使用nginx要做请求转发。</p><a id="more"></a><h3 id="运行环境"><a href="#运行环境" class="headerlink" title="运行环境"></a>运行环境</h3><ul><li>Ubuntu 14.1</li><li>Python 2.7.10</li><li>Django 1.9.5</li></ul><h3 id="搭建准备"><a href="#搭建准备" class="headerlink" title="搭建准备"></a>搭建准备</h3><p><strong>首先更新下 apt-get</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure><p><strong>安装 nginx</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install nginx</span><br></pre></td></tr></table></figure><p><strong>修改 nginx配置文件信息，下面以 baidu.com 举例。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/nginx/sites-available/baidu</span><br></pre></td></tr></table></figure><p><strong>修改信息为如下</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># the nginx server instance</span><br><span class="line">server &#123;</span><br><span class="line">    listen 0.0.0.0:80;</span><br><span class="line"></span><br><span class="line">    server_name baidu.com baidu;</span><br><span class="line">    access_log /var/log/nginx/baidu.log;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">      proxy_set_header Host $host;</span><br><span class="line">      proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line"></span><br><span class="line">      proxy_pass http://127.0.0.1:8000/;</span><br><span class="line">      proxy_redirect off;</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p><strong>配置好网站信息后，接着在nginx启用该站点</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /etc/nginx/sites-enabled/ </span><br><span class="line">ln -s /etc/nginx/sites-available/baidu baidu</span><br></pre></td></tr></table></figure><p><strong>重启nginx</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /etc/init.d/nginx restart</span><br></pre></td></tr></table></figure><p><strong>进入Django所在目录</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /path/to/django_dir</span><br><span class="line">python manage.py runserver</span><br></pre></td></tr></table></figure><p><strong>但是此方法一旦SSH断开连接 服务器也会关闭，可以使用 screen来保持服务器一直开启。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install screen</span><br><span class="line">screen python manage.py runserver</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      Django自带的 python manage.py runserver只提供测试用，到了实际生产环境中，需要使用nginx要做请求转发
    
    </summary>
    
    
      <category term="django" scheme="http://marisa.im/tags/django/"/>
    
      <category term="nginx" scheme="http://marisa.im/tags/nginx/"/>
    
      <category term="python" scheme="http://marisa.im/tags/python/"/>
    
  </entry>
  
</feed>
